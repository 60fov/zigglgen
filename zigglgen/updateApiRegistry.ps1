#Requires -Version 7.4

[CmdletBinding()]
param ()

$ErrorActionPreference = 'Stop'
Set-StrictMode -Off

function main {
    $null = New-Item -ItemType Directory _OpenGL-Registry
    Push-Location _OpenGL-Registry
    try {
        try {
            git init
            git fetch https://github.com/KhronosGroup/OpenGL-Registry.git main
            git checkout FETCH_HEAD
            $registry = Select-Xml '/*' xml/gl.xml | Select-Object -ExpandProperty Node
            $rev = git rev-parse HEAD
        } finally {
            Pop-Location
        }

        if ($registry.comment -notmatch '(?m)^Copyright 2013-2020 The Khronos Group Inc\.\r?\nSPDX-License-Identifier: Apache-2\.0$') {
            throw "The OpenGL XML API Registry license notice has changed."
        }

        processApiRegistry $registry $rev | zig fmt --stdin | Set-Content api_registry.zig
        zig test api_registry.zig

        processGeneratorOptions $registry $rev | zig fmt --stdin | Set-Content generator_options.zig
        zig test generator_options.zig
    } finally {
        Remove-Item _OpenGL-Registry -Recurse -Force
    }
}

function processApiRegistry ([System.Xml.XmlElement] $registry, [string] $rev) {
    "// This file was generated by '$scriptName'."
    "// OpenGL XML API Registry revision: $rev"
    ''
    "pub const revision = `"$rev`";"
    ''
    'pub const Type = struct {'
    '    name: Name,'
    '    requires: ?Name = null,'
    ''
    '    pub const Name = enum {'
    $registry
    | Select-Xml 'types/type'
    | Select-Object -ExpandProperty Node
    | Select-Object -ExpandProperty name
    | ForEach-Object { stripPrefix $_ }
    | Sort-Object { glSortKey $_ }
    | ForEach-Object { "@`"$_`"," }
    '    };'
    '};'
    ''
    'pub const Constant = struct {'
    '    name: Name,'
    '    value: i128,'
    '    api: ?Api.Name = null,'
    ''
    '    pub const Name = enum {'
    $registry
    | Select-Xml 'enums/enum'
    | Select-Object -ExpandProperty Node
    | Select-Object -ExpandProperty name -Unique
    | ForEach-Object { stripPrefix $_ }
    | Sort-Object { glSortKey $_ }
    | ForEach-Object { "@`"$_`"," }
    '    };'
    '};'
    ''
    'pub const Command = struct {'
    '    name: Name,'
    '    params: []const Param,'
    '    return_type_expr: []const Token,'
    ''
    '    pub const Name = enum {'
    $registry
    | Select-Xml 'commands/command/proto'
    | Select-Object -ExpandProperty Node
    | Select-Object -ExpandProperty name
    | ForEach-Object { stripPrefix $_ }
    | Sort-Object { glSortKey $_ }
    | ForEach-Object { "@`"$_`"," }
    '    };'
    ''
    '    pub const Param = struct {'
    '        name: []const u8,'
    '        type_expr: []const Token,'
    '    };'
    ''
    '    pub const Token = union(enum) {'
    '        void,'
    '        @"*",'
    '        @"const",'
    '        type: Type.Name,'
    '    };'
    '};'
    ''
    'pub const Api = struct {'
    '    name: Name,'
    '    version: [2]u8,'
    '    add: []const Feature,'
    '    remove: []const Feature,'
    ''
    '    pub const Name = enum { gl, gles1, gles2, glsc2 };'
    '};'
    ''
    'pub const ProfileName = enum { core, compatibility, common, common_lite };'
    ''
    'pub const Extension = struct {'
    '    name: Name,'
    '    apis: []const Api.Name,'
    '    add: []const Feature,'
    ''
    '    pub const Name = enum {'
    $registry
    | Select-Xml 'extensions/extension'
    | Select-Object -ExpandProperty Node
    | Select-Object -ExpandProperty name
    | ForEach-Object { stripPrefix $_ }
    | Sort-Object { glSortKey $_ }
    | ForEach-Object { "@`"$_`"," }
    '    };'
    '};'
    ''
    'pub const Feature = struct {'
    '    name: Name,'
    '    api: ?Api.Name = null,'
    '    profile: ?ProfileName = null,'
    ''
    '    pub const Name = union(enum) {'
    '        type: Type.Name,'
    '        constant: Constant.Name,'
    '        command: Command.Name,'
    '    };'
    '};'
    ''
    'pub const types = [_]Type{'
    $registry
    | Select-Xml 'types/type'
    | Select-Object -ExpandProperty Node
    | Sort-Object { glSortKey (stripPrefix $_.name) }
    | ForEach-Object {
        '.{'
        ".name = .@`"$(stripPrefix $_.name)`""
        if ($_.requires) { ", .requires = .@`"$(stripPrefix $_.requires)`"" }
        '},'
    }
    '};'
    ''
    'pub const constants = [_]Constant{'
    $registry
    | Select-Xml 'enums/enum'
    | Select-Object -ExpandProperty Node
    | Sort-Object { glSortKey (stripPrefix $_.name) }, api
    | ForEach-Object {
        '.{'
        ".name = .@`"$(stripPrefix $_.name)`","
        ".value = $(+"$($_.value -replace '\A0x', '0x0')n")"
        if ($_.api) { ", .api = .$($_.api)" }
        '},'
    }
    '};'
    ''
    'pub const commands = [_]Command{'
    $registry
    | Select-Xml 'commands/command'
    | Select-Object -ExpandProperty Node
    | Sort-Object { glSortKey (stripPrefix $_.proto.name) }
    | ForEach-Object {
        '.{'
        ".name = .@`"$(stripPrefix $_.proto.name)`","
        '.params = &.{'
        $_
        | Select-Xml 'param'
        | Select-Object -ExpandProperty Node
        | ForEach-Object {
            '.{'
            ".name = `"$($_.name)`","
            ".type_expr = &.{ $((parseDecl $_.InnerText) -join ', ') }"
            '},'
        }
        '},'
        ".return_type_expr = &.{ $((parseDecl $_.proto.InnerText) -join ', ') },"
        '},'
    }
    '};'
    ''
    'pub const apis = [_]Api{'
    $registry
    | Select-Xml 'feature'
    | Select-Object -ExpandProperty Node
    | Sort-Object api, number
    | ForEach-Object {
        '.{'
        ".name = .$($_.api),"
        ".version = .{ $($_.number -split '\.' -join ', ') },"
        '.add = &.{'
        $_
        | Select-Xml "require/*"
        | Select-Object -ExpandProperty Node
        | Sort-Object {
            switch ($_.LocalName) {
                'type' { 0; break }
                'enum' { 1; break }
                'command' { 2; break }
            }
        }, { glSortKey (stripPrefix $_.name) }
        | ForEach-Object {
            '.{'
            ".name = .{ $(
                switch ($_.LocalName) {
                    'type' { '.type'; break }
                    'enum' { '.constant'; break }
                    'command' { '.command'; break }
                }
            ) = .@`"$(stripPrefix $_.name)`" }"
            if ($_.ParentNode.profile) { ", .profile = .$($_.ParentNode.profile -replace '-', '_')" }
            '},'
        }
        '},'
        '.remove = &.{'
        $_
        | Select-Xml "remove/*"
        | Select-Object -ExpandProperty Node
        | Sort-Object {
            switch ($_.LocalName) {
                'type' { 0; break }
                'enum' { 1; break }
                'command' { 2; break }
            }
        }, { glSortKey (stripPrefix $_.name) }
        | ForEach-Object {
            '.{'
            ".name = .{ $(
                switch ($_.LocalName) {
                    'type' { '.type'; break }
                    'enum' { '.constant'; break }
                    'command' { '.command'; break }
                }
            ) = .@`"$(stripPrefix $_.name)`" }"
            if ($_.ParentNode.profile) { ", .profile = .$($_.ParentNode.profile -replace '-', '_')" }
            '},'
        }
        '},'
        '},'
    }
    '};'
    ''
    'pub const extensions = [_]Extension{'
    $registry
    | Select-Xml 'extensions/extension'
    | Select-Object -ExpandProperty Node
    | Sort-Object { glSortKey (stripPrefix $_.name) }
    | ForEach-Object {
        '.{'
        ".name = .@`"$(stripPrefix $_.name)`","
        ".apis = &.{ $(($_.supported -split '\|' -match '\Agl(es[12]|sc2)?\z' -replace '\A.*\z', '.$&' -join ', ') | Sort-Object) },"
        '.add = &.{'
        $_
        | Select-Xml "require/*"
        | Select-Object -ExpandProperty Node
        | Sort-Object {
            switch ($_.LocalName) {
                'type' { 0; break }
                'enum' { 1; break }
                'command' { 2; break }
            }
        }, { glSortKey (stripPrefix $_.name) }
        | ForEach-Object {
            '.{'
            ".name = .{ $(
                switch ($_.LocalName) {
                    'type' { '.type'; break }
                    'enum' { '.constant'; break }
                    'command' { '.command'; break }
                }
            ) = .@`"$(stripPrefix $_.name)`" }"
            if ($_.ParentNode.api) { ", .api = .$($_.ParentNode.api)" }
            if ($_.ParentNode.profile) { ", .profile = .$($_.ParentNode.profile -replace '-', '_')" }
            '},'
        }
        '},'
        '},'
    }
    '};'
    ''
    'test {'
    '    @import("std").testing.refAllDeclsRecursive(@This());'
    '}'
}

function processGeneratorOptions ([System.Xml.XmlElement] $registry, [string] $rev) {
    "// This file was generated by '$scriptName'."
    "// OpenGL XML API Registry revision: $rev"
    ''
    'pub const Api = enum { gl, gles, glsc };'
    ''
    'pub const Version = enum {'
    $registry
    | Select-Xml 'feature'
    | Select-Object -ExpandProperty Node
    | Select-Object -ExpandProperty number -Unique
    | Sort-Object
    | ForEach-Object { "@`"$_`"," }
    '};'
    ''
    'pub const Profile = enum { core, compatibility, common, common_lite };'
    ''
    'pub const Extension = enum {'
    $registry
    | Select-Xml 'extensions/extension'
    | Select-Object -ExpandProperty Node
    | Select-Object -ExpandProperty name
    | ForEach-Object { stripPrefix $_ }
    | Sort-Object { glSortKey $_ }
    | ForEach-Object { "@`"$_`"," }
    '};'
    ''
    'test {'
    '    @import("std").testing.refAllDeclsRecursive(@This());'
    '}'
}

$scriptName = $PSCommandPath | Split-Path -Leaf

function stripPrefix([string] $str) {
    $str -creplace '\A(GL_?|gl|struct\s+_*)', ''
}

function glSortKey ([string] $str) {
    (
        [regex]::Replace($str, '[0-9]+', { param ($m) $m.Value.PadLeft(5, '0') }) -split '_'
        | ForEach-Object {
            (
                $_ -csplit '(?<=[a-z])(?=[A-Z0-9])|(?<=[A-Z0-9])(?=[A-Z][a-z])'
                | ForEach-Object { ($_.GetEnumerator() | ForEach-Object { '{0:000}' -f ([ushort]$_ + 100) }) -join '' }
            ) -join '0'
        }
    ) -join '00'
}

function parseDecl ([string] $decl) {
    $tokens =
        $decl
        | Select-String '(struct\s+)?[^\s*]+|\*' -AllMatches
        | Select-Object -ExpandProperty Matches
        | Select-Object -ExpandProperty Value
    if ($tokens[0] -eq 'const') {
        $tokens[0], $tokens[1] = $tokens[1], $tokens[0]
    }
    $tokens[($tokens.Length - 2)..0] | ForEach-Object {
        if ($_ -in @('void'; '*'; 'const')) {
            ".@`"$_`""
        } else {
            ".{ .type = .@`"$(stripPrefix $_)`" }"
        }
    }
}

Push-Location $PSScriptRoot
try { main } finally { Pop-Location }
